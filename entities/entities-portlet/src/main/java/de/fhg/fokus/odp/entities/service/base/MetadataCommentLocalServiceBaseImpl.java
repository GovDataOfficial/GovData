package de.fhg.fokus.odp.entities.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import de.fhg.fokus.odp.entities.model.MetadataComment;
import de.fhg.fokus.odp.entities.service.MetadataCommentLocalService;
import de.fhg.fokus.odp.entities.service.persistence.MetadataCommentPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the metadata comment local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.fhg.fokus.odp.entities.service.impl.MetadataCommentLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see de.fhg.fokus.odp.entities.service.impl.MetadataCommentLocalServiceImpl
 * @see de.fhg.fokus.odp.entities.service.MetadataCommentLocalServiceUtil
 * @generated
 */
public abstract class MetadataCommentLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements MetadataCommentLocalService,
        IdentifiableBean {
    @BeanReference(type = de.fhg.fokus.odp.entities.service.MetadataCommentLocalService.class)
    protected de.fhg.fokus.odp.entities.service.MetadataCommentLocalService metadataCommentLocalService;
    @BeanReference(type = MetadataCommentPersistence.class)
    protected MetadataCommentPersistence metadataCommentPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private MetadataCommentLocalServiceClpInvoker _clpInvoker = new MetadataCommentLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link de.fhg.fokus.odp.entities.service.MetadataCommentLocalServiceUtil} to access the metadata comment local service.
     */

    /**
     * Adds the metadata comment to the database. Also notifies the appropriate model listeners.
     *
     * @param metadataComment the metadata comment
     * @return the metadata comment that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public MetadataComment addMetadataComment(MetadataComment metadataComment)
        throws SystemException {
        metadataComment.setNew(true);

        return metadataCommentPersistence.update(metadataComment);
    }

    /**
     * Creates a new metadata comment with the primary key. Does not add the metadata comment to the database.
     *
     * @param _id the primary key for the new metadata comment
     * @return the new metadata comment
     */
    @Override
    public MetadataComment createMetadataComment(long _id) {
        return metadataCommentPersistence.create(_id);
    }

    /**
     * Deletes the metadata comment with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param _id the primary key of the metadata comment
     * @return the metadata comment that was removed
     * @throws PortalException if a metadata comment with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public MetadataComment deleteMetadataComment(long _id)
        throws PortalException, SystemException {
        return metadataCommentPersistence.remove(_id);
    }

    /**
     * Deletes the metadata comment from the database. Also notifies the appropriate model listeners.
     *
     * @param metadataComment the metadata comment
     * @return the metadata comment that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public MetadataComment deleteMetadataComment(
        MetadataComment metadataComment) throws SystemException {
        return metadataCommentPersistence.remove(metadataComment);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(MetadataComment.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return metadataCommentPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.fhg.fokus.odp.entities.model.impl.MetadataCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return metadataCommentPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.fhg.fokus.odp.entities.model.impl.MetadataCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return metadataCommentPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return metadataCommentPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return metadataCommentPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public MetadataComment fetchMetadataComment(long _id)
        throws SystemException {
        return metadataCommentPersistence.fetchByPrimaryKey(_id);
    }

    /**
     * Returns the metadata comment with the primary key.
     *
     * @param _id the primary key of the metadata comment
     * @return the metadata comment
     * @throws PortalException if a metadata comment with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public MetadataComment getMetadataComment(long _id)
        throws PortalException, SystemException {
        return metadataCommentPersistence.findByPrimaryKey(_id);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return metadataCommentPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the metadata comments.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.fhg.fokus.odp.entities.model.impl.MetadataCommentModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of metadata comments
     * @param end the upper bound of the range of metadata comments (not inclusive)
     * @return the range of metadata comments
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<MetadataComment> getMetadataComments(int start, int end)
        throws SystemException {
        return metadataCommentPersistence.findAll(start, end);
    }

    /**
     * Returns the number of metadata comments.
     *
     * @return the number of metadata comments
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getMetadataCommentsCount() throws SystemException {
        return metadataCommentPersistence.countAll();
    }

    /**
     * Updates the metadata comment in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param metadataComment the metadata comment
     * @return the metadata comment that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public MetadataComment updateMetadataComment(
        MetadataComment metadataComment) throws SystemException {
        return metadataCommentPersistence.update(metadataComment);
    }

    /**
     * Returns the metadata comment local service.
     *
     * @return the metadata comment local service
     */
    public de.fhg.fokus.odp.entities.service.MetadataCommentLocalService getMetadataCommentLocalService() {
        return metadataCommentLocalService;
    }

    /**
     * Sets the metadata comment local service.
     *
     * @param metadataCommentLocalService the metadata comment local service
     */
    public void setMetadataCommentLocalService(
        de.fhg.fokus.odp.entities.service.MetadataCommentLocalService metadataCommentLocalService) {
        this.metadataCommentLocalService = metadataCommentLocalService;
    }

    /**
     * Returns the metadata comment persistence.
     *
     * @return the metadata comment persistence
     */
    public MetadataCommentPersistence getMetadataCommentPersistence() {
        return metadataCommentPersistence;
    }

    /**
     * Sets the metadata comment persistence.
     *
     * @param metadataCommentPersistence the metadata comment persistence
     */
    public void setMetadataCommentPersistence(
        MetadataCommentPersistence metadataCommentPersistence) {
        this.metadataCommentPersistence = metadataCommentPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("de.fhg.fokus.odp.entities.model.MetadataComment",
            metadataCommentLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "de.fhg.fokus.odp.entities.model.MetadataComment");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return MetadataComment.class;
    }

    protected String getModelClassName() {
        return MetadataComment.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = metadataCommentPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
